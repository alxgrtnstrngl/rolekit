#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2009-2014 Red Hat, Inc.
#
# Authors:
# Thomas Woerner <twoerner@redhat.com>
# Jiri Popelka <jpopelka@redhat.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

from gi.repository import GObject
import sys
sys.modules['gobject'] = GObject

import argparse
import dbus
import os

from server.client import *
from server.errors import *
from server.functions import joinArgs, splitArgs

def __print(msg=None):
    if msg and not a.quiet:
        print(msg)

def __print_and_exit(msg=None, exit_code=0):
    FAIL = '\033[91m'
    OK =   '\033[92m'
    END =  '\033[00m'
    if exit_code != 0:
        __print(FAIL + msg + END)
    else:
        __print(msg)
        #__print(OK + msg + END)
    sys.exit(exit_code)

def __fail(msg=None):
    __print_and_exit(msg, 2)

def __print_if_verbose(msg=None):
    if msg and a.verbose:
        print(msg)

def __usage():
    print ("""
Usage: server-cmd [OPTIONS...]

General Options
  -h, --help           Prints a short help text and exists
  -V, --version        Print the version string of rolekit
  -q, --quiet          Do not print status messages

""")

def __print_query_result(value):
    if value:
        __print_and_exit("yes")
    else:
        __print_and_exit("no")

def __exception_handler(exception_message):
    if "NotAuthorizedException" in exception_message:
        msg = """Authorization failed.
Make sure polkit agent is running or run the application as superuser."""
        __print_and_exit(msg, NOT_AUTHORIZED)
    else:
        code = ServerError.get_code(exception_message)
        if code in [ ALREADY_ENABLED, NOT_ENABLED, ZONE_ALREADY_SET ]:
            __print_and_exit("Warning: %s" % exception_message)
        else:
            __print_and_exit("Error: %s" % exception_message, code)

parser = argparse.ArgumentParser(usage="see server-cmd man page",
                                 add_help=False)

parser_group_output = parser.add_mutually_exclusive_group()
parser_group_output.add_argument("-v", "--verbose", action="store_true")
parser_group_output.add_argument("-q", "--quiet", action="store_true")

parser_group_standalone = parser.add_mutually_exclusive_group()
parser_group_standalone.add_argument("-h", "--help",
                                     action="store_true")
parser_group_standalone.add_argument("-V", "--version", action="store_true")

a = parser.parse_args(args)

options_standalone = a.help or a.version or a.state 


# these are supposed to only write out some output
options_list_get = a.help or a.version

# Check various impossible combinations of options

if a.help:
    __usage()
    sys.exit(0)

rk = RolekitClient()
rk.setExceptionHandler(__exception_handler)
if rk.connected == False:
    if a.state:
        __print_and_exit ("not running", NOT_RUNNING)
    else:
        __print_and_exit ("Rolekit is not running", NOT_RUNNING)

if a.version:
    __print_and_exit(fw.get_property("version"))
elif a.state:
    state = fw.get_property("status")
    if state == "RUNNING":
        __print_and_exit ("running")
    else:
        __print_and_exit ("not running", NOT_RUNNING)

__print_and_exit("success")
